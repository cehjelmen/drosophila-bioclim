ggarrange(p.val, adj.r, est, common.legend = TRUE, legend="bottom",
nrow=1, labels="auto",
hjust=-0.1, align="hv",
font.label = list(size=20))
adj.r<-ggplot(sig.dat, aes(x=Adj..r.square, fill=Variable))+
geom_density(alpha=0.4)+
xlim(-0.3,0.35)+
ylim(0,14)+
scale_fill_viridis_d(end=0.8)+
scale_color_viridis_d(end=0.8)+
geom_vline(xintercept = 0, color="black",
linetype="dashed", linewidth=1.5)+
geom_vline(data=mu.r, aes(xintercept=grp.median, color=Variable),
linewidth=1)+
annotate("text", x=0.35, y=11.65,
label=("Median Adj. R-squared\nBio5 = 0.028\nBio9 = 0.030\nBio10 = 0.034\nBio19 = 0.036"),
size=4, hjust=1)+
theme_bw()+
theme(
axis.title.x = element_text(size=16, color="black", face="bold"),
axis.title.y = element_blank(),
axis.text=element_text(size=14, color="black"),
legend.title = element_blank(),
legend.text = element_text(size=14, color="black"),
legend.position = "bottom"
)
est<-ggplot(sig.dat, aes(x=`Estimate`, fill=Variable))+
geom_density(alpha=0.4)+
xlim(-0.7,0.7)+
ylim(0,22)+
scale_fill_viridis_d(end=0.8)+
scale_color_viridis_d(end=0.8)+
geom_vline(xintercept = 0, color="black",
linetype="dashed", linewidth=1.5)+
geom_vline(data=mu.e, aes(xintercept=grp.median, color=Variable),
linewidth=1)+
annotate("text", x=0.7, y=18.5,
label=("Median Estimate\nBio5 = -0.241\nBio9 = -0.059\nBio10 = -0.212\nBio19 = -0.0420"),
size=4, hjust=1)+
theme_bw()+
theme(
axis.title.x = element_text(size=16, color="black", face="bold"),
axis.title.y = element_blank(),
axis.text=element_text(size=14, color="black"),
legend.title = element_blank(),
legend.text = element_text(size=14, color="black"),
legend.position = "bottom"
)
ggarrange(p.val, adj.r, est, common.legend = TRUE, legend="bottom",
nrow=1, labels="auto",
hjust=-0.1, align="hv",
font.label = list(size=20))
adj.r<-ggplot(sig.dat, aes(x=Adj..r.square, fill=Variable))+
geom_density(alpha=0.4)+
xlim(-0.3,0.35)+
ylim(0,14)+
scale_fill_viridis_d(end=0.8)+
scale_color_viridis_d(end=0.8)+
geom_vline(xintercept = 0, color="black",
linetype="dashed", linewidth=1.5)+
geom_vline(data=mu.r, aes(xintercept=grp.median, color=Variable),
linewidth=1)+
annotate("text", x=0.35, y=11.75,
label=("Median Adj. R-squared\nBio5 = 0.028\nBio9 = 0.030\nBio10 = 0.034\nBio19 = 0.036"),
size=4, hjust=1)+
theme_bw()+
theme(
axis.title.x = element_text(size=16, color="black", face="bold"),
axis.title.y = element_blank(),
axis.text=element_text(size=14, color="black"),
legend.title = element_blank(),
legend.text = element_text(size=14, color="black"),
legend.position = "bottom"
)
est<-ggplot(sig.dat, aes(x=`Estimate`, fill=Variable))+
geom_density(alpha=0.4)+
xlim(-0.7,0.7)+
ylim(0,22)+
scale_fill_viridis_d(end=0.8)+
scale_color_viridis_d(end=0.8)+
geom_vline(xintercept = 0, color="black",
linetype="dashed", linewidth=1.5)+
geom_vline(data=mu.e, aes(xintercept=grp.median, color=Variable),
linewidth=1)+
annotate("text", x=0.7, y=18.5,
label=("Median Estimate\nBio5 = -0.241\nBio9 = -0.059\nBio10 = -0.212\nBio19 = -0.0420"),
size=4, hjust=1)+
theme_bw()+
theme(
axis.title.x = element_text(size=16, color="black", face="bold"),
axis.title.y = element_blank(),
axis.text=element_text(size=14, color="black"),
legend.title = element_blank(),
legend.text = element_text(size=14, color="black"),
legend.position = "bottom"
)
ggarrange(p.val, adj.r, est, common.legend = TRUE, legend="bottom",
nrow=1, labels="auto",
hjust=-0.1, align="hv",
font.label = list(size=20))
####plots of PIC####
##facet plot of p-values
ggplot(output.table.pic.df, aes(x=`p-value`, fill=Variable))+
geom_density()+
facet_wrap(~Variable, scales="free")+
geom_vline(xintercept = 0.05, color="red", linewidth=1.1, linetype="dotdash")+
scale_fill_viridis_d()+
theme_bw()+
theme(legend.position = "none",
strip.text = element_text(face="bold", size=14),
axis.text=element_text(color="black", size=12),
axis.title.y=element_blank(),
axis.title.x=element_text(size=14, face="bold", color="black"))+
xlim(c(-0.2, 1.1))
####plots of PIC####
##facet plot of p-values
ggplot(output.table.pic.df, aes(x=`p.value`, fill=Variable))+
geom_density()+
facet_wrap(~Variable, scales="free")+
geom_vline(xintercept = 0.05, color="red", linewidth=1.1, linetype="dotdash")+
scale_fill_viridis_d()+
theme_bw()+
theme(legend.position = "none",
strip.text = element_text(face="bold", size=14),
axis.text=element_text(color="black", size=12),
axis.title.y=element_blank(),
axis.title.x=element_text(size=14, face="bold", color="black"))+
xlim(c(-0.2, 1.1))
##Facet plot of adj. r-square
ggplot(output.table.lm.df, aes(x=`Adj. r-square`, fill=Variable))+
geom_density()+
facet_wrap(~Variable)+
geom_vline(xintercept=0, colour="red", linewidth=1.1, linetype="dotdash")+
theme_bw()+
theme(legend.position = "none",
strip.text = element_text(face="bold", size=14),
axis.text=element_text(color="black", size=12),
axis.title.y=element_blank(),
axis.title.x=element_text(size=14, face="bold", color="black"))
####Linear model plots####
#facet plots of p-values
ggplot(output.table.lm.df, aes(x=`p-value`, fill=Variable))+
geom_density()+
facet_wrap(~Variable, scales="free")+
geom_vline(xintercept = 0.05, color="red", linewidth=1.1, linetype="dotdash")+
theme_bw()+
theme(legend.position = "none",
strip.text = element_text(face="bold", size=14),
axis.text=element_text(color="black", size=8),
axis.title.y=element_blank(),
axis.title.x=element_text(size=14, face="bold", color="black"))+
xlim(c(-0.2, 1))
library(spocc)
library(maps)
library(ggplot2)
library(ape)
library(phytools)
library(viridis)
library(rgbif)
library(ggExtra)
#read in list of species
gsdat<-read.csv("data/climate_data_drosophila_Sept17.csv", as.is=T)
gs<-gsdat$Species
phy.dat<-read.csv("data/output/all.locale.gbif.csv")
####pulling in tree for plot####
mytree<-read.tree("data/mytree2.tre")
#remove na's
phy.dat.na<-na.omit(phy.dat)
colnames(phy.dat.na)<-c("Species", "lat", "long")
#species names as factor
phy.dat.na$Species<-as.factor(phy.dat.na$Species)
#keep only species with data in the tree
mytree2<-keep.tip(mytree, tip=levels(phy.dat.na$Species))
#make a dataframe of just lat and long
foo<-data.frame(phy.dat.na$lat, phy.dat.na$long)
levels(phy.dat.na$Species)
library(spocc)
library(maps)
library(ggplot2)
library(ape)
library(phytools)
library(viridis)
library(rgbif)
library(ggExtra)
#read in list of species
gsdat<-read.csv("data/climate_data_drosophila_Sept17.csv", as.is=T)
gs<-gsdat$Species
phy.dat<-read.csv("data/output/all.locale.gbif.csv")
####pulling in tree for plot####
mytree<-read.tree("data/mytree2.tre")
phy.dat$X<-NULL
#phy.dat$X<-NULL
colnames(phy.dat.na)<-c("Species", "lat", "long")
#remove na's
phy.dat.na<-na.omit(phy.dat)
#phy.dat$X<-NULL
colnames(phy.dat.na)<-c("Species", "lat", "long")
#species names as factor
phy.dat.na$Species<-as.factor(phy.dat.na$Species)
#keep only species with data in the tree
mytree2<-keep.tip(mytree, tip=levels(phy.dat.na$Species))
#make a dataframe of just lat and long
foo<-data.frame(phy.dat.na$lat, phy.dat.na$long)
colnames(foo)<-c("lat", "long")
foo$lat<-as.numeric(foo$lat)
foo$long<-as.numeric(foo$long)
#maek into a matrix
testagain2<-as.matrix(foo)
#name rows after species
rownames(testagain2)<-phy.dat.na$Species
length(unique(phy.dat.na$Species))
#keep only species with data in the tree
mytree2<-keep.tip(mytree, tip=levels(phy.dat.na$Species))
#make a dataframe of just lat and long
foo<-data.frame(phy.dat.na$lat, phy.dat.na$long)
colnames(foo)<-c("lat", "long")
foo$lat<-as.numeric(foo$lat)
foo$long<-as.numeric(foo$long)
#maek into a matrix
testagain2<-as.matrix(foo)
#name rows after species
rownames(testagain2)<-phy.dat.na$Species
#####All Species Phylo to Map####
#make map object
dros.phymap<-phylo.to.map(mytree2, testagain2, plot=FALSE)
gsdat<-read.csv("alldata.csv")
#####Read in file (if you haven't already) to get subgenus info and color info####
#read in file with subgenus breakup
#gsdat<-read.csv("data/alldata.csv")
str(gsdat)
gsdat$Subgenus<-as.factor(gsdat$Subgenus)
#make list of speices which are sophophora
soph<-gsdat$Species[gsdat$Subgenus=="Sophophora"]
#list of species which are Drosophila subgenus
dros<-gsdat$Species[gsdat$Subgenus=="Drosophila"]
#interesection of species which are sophophora and in occurence data
soph2<-intersect(phy.dat.na$Species, soph)
#subset by sophophora species
soph.phy.da<-phy.dat.na[phy.dat.na$Species %in% soph2,]
#do the same for Drosophila subgenus
dros2<-intersect(phy.dat.na$Species, dros)
dros.phy.da<-phy.dat.na[phy.dat.na$Species %in% dros2,]
#make matrix files for phymap Sophophora
soph.da<-data.frame(soph.phy.da$lat, soph.phy.da$long)
colnames(soph.da)<-c("lat", "long")
soph.da$lat<-as.numeric(soph.da$lat)
soph.da$long<-as.numeric(soph.da$long)
#maek into a matrix
soph.da2<-as.matrix(soph.da)
#name rows after species
rownames(soph.da2)<-soph.phy.da$Species
drossub.da<-data.frame(dros.phy.da$lat, dros.phy.da$long)
colnames(drossub.da)<-c("lat", "long")
str(drossub.da)
drossub.da$lat<-as.numeric(drossub.da$lat)
drossub.da$long<-as.numeric(drossub.da$long)
#maek into a matrix
drossub.da2<-as.matrix(drossub.da)
#name rows after species
rownames(drossub.da2)<-dros.phy.da$Species
#sophtree
sophtree<-keep.tip(mytree2, intersect(phy.dat.na$Species, soph))
#drostree
drostree<-keep.tip(mytree2, intersect(phy.dat.na$Species, dros))
####Colors by subgenus and GS####
#dros gs data for colors
dros.gs.da<-gsdat[gsdat$Species %in% dros2,]
g9<-ggplot(dros.gs.da, aes(x=Haploid_Number, y=MbDNA_Female, col=MbDNA_Female))+
geom_point()+
scale_color_viridis()
p<-ggplot_build(g9)
color.list<-p$data[[1]]["colour"]
#put the list of colors which correspond here
droscoltest<-setNames(color.list$colour, dros.gs.da$Species)
soph.gs.da<-gsdat[gsdat$Species %in% soph2,]
g10<-ggplot(soph.gs.da, aes(x=Haploid_Number, y=MbDNA_Female, col=MbDNA_Female))+
geom_point()+
scale_color_viridis()
p2<-ggplot_build(g10)
color.list2<-p2$data[[1]]["colour"]
#put the list of colors which correspond here
sophcoltest<-setNames(color.list2$colour, soph.gs.da$Species)
#colors for full tree
all.spec.da<-gsdat[gsdat$Species %in% mytree2$tip.label,]
g11<-ggplot(all.spec.da, aes(x=Haploid_Number, y=MbDNA_Female, col=MbDNA_Female))+
geom_point()+
scale_color_viridis()
p3<-ggplot_build(g11)
color.list3<-p3$data[[1]]["colour"]
#put the list of colors which correspond here
allcoltest<-setNames(color.list3$colour, all.spec.da$Species)
####Plot of trees with colors by GS####
drossub.phy.map<-phylo.to.map(drostree, drossub.da2, plot=FALSE)
sophsub.phy.map<-phylo.to.map(sophtree, soph.da2, plot=FALSE)
#dros subgenus tree
plot(drossub.phy.map, direction="rightwards",
fsize=0.5, ftype="i", asp=1, lty="solid", map.bg="grey",
lwd=0.4, pts=FALSE, colors=droscoltest, cex.points=0.4, delimit_map=TRUE)
#soph subgenus tree
plot(sophsub.phy.map, direction="rightwards",
fsize=0.5, ftype="i", asp=1, lty="solid", map.bg="grey",
lwd=0.4, pts=FALSE, colors=sophcoltest, cex.points=0.4, delimit_map=TRUE)
#all species tree
plot(dros.phymap, fsize=0.5,direction="rightwards",
ftype="i", asp=1, lty="solid", map.bg="grey",
lwd=0.4, pts=FALSE, colors=allcoltest, cex.points=0.4, delimit_map=TRUE)
####Making map of locality by GS with no tree
####This uses info from the all species tree color plot
newinfo<-matrix(,nrow=length(testagain2[,1]), ncol=4)
phy.ma.gs<-as.matrix(phy.dat.na)
#head(phy.ma)
for(i in 1:length(testagain2[,1])){
newinfo[i,1]<-phy.ma.gs[i,1]
newinfo[i,2]<-all.spec.da$MbDNA_Female[all.spec.da$Species==phy.ma.gs[i,1]]
newinfo[i,3]<-phy.ma.gs[i,2]
newinfo[i,4]<-phy.ma.gs[i,3]
}
#make that matrix into a datafram with labels
newinfo2<-as.data.frame(newinfo)
names(newinfo2)<-c("Species", "GS", "lat", "long")
#speices as factor and other information as numeric
newinfo2$Species<-as.factor(newinfo2$Species)
newinfo2$GS<-as.numeric(newinfo2$GS)
newinfo2$lat<-as.numeric(newinfo2$lat)
newinfo2$long<-as.numeric(newinfo2$long)
str(newinfo2)
#ggplot of gs by latitude
cor.gs<-ggplot(newinfo2, aes(x=abs(lat), y=GS, color=GS))+
geom_point(alpha=0.4)+
scale_color_viridis(end=0.9, name="Genome Size \n(Mbp)")+
theme_minimal()+
geom_smooth(method = "lm", col="red")+
xlab("Distance from Equator (latitude)")+
ylab("Genome Size (Mbp)")+
theme(axis.title=element_text(face="bold", size=14),
axis.text=element_text(size=12, color="black"),
legend.title = element_text(size=12, face="bold"),
legend.text = element_text(size=10),
legend.key.width = unit(3, "cm"),
legend.position = "bottom")
ggMarginal(cor.gs, type="histogram", fill="grey90")
summary(lm(GS~abs(lat), data=newinfo2))
# load world political data
library(sf);library(terra);library(dplyr)
library(ggplot2);library(gridExtra);library(tidyterra)
# load output data for plotting
results     <- "./data/mapping"
dfgs        <- read.csv("data/output/dros_gs_occur.csv") # OLD DATA
world       <- read_sf(file.path(results, "world-simple.geojson"))
dros_heat   <- rast(file.path(results, "drosophila_heatmap_n67_10m_1.grd"))
# # # # # # # # # # # # # # # # # #
# Figure 1. global species heatmap
world %>% ggplot() +
geom_spatvector(fill = alpha("grey40", 0.5) ) +
geom_spatraster(data = dros_heat) +
scale_fill_whitebox_c(
palette = "muted", # can use "viridi"
n.breaks = 10,
guide = guide_legend(reverse = TRUE)) +
labs(
fill = "Counts",
title = "Drosophila Distribution (n = 67)",
subtitle = "based on temperature tolerance") +
ylim(c(-60,85)) + theme_minimal()
# # # # # # # # # # # # # # # # # #
# Figure 1.1 global species w/ heatmap heatmap
# point map
p1 <- world %>% ggplot() +
geom_spatvector(fill = alpha("grey40", 0.5)) +
geom_point(data = dfgs, aes(x = long, y = lat, colour = GS), size = 0.5) +
labs(
tag = "A",
fill = "Species Occurences",
title = "GBIF observations") +
scale_color_viridis_c() +
ylim(c(-60,85)) + theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 10, face = "bold"))
# heat map
p2 <- world %>% ggplot() +
geom_spatvector(fill = alpha("grey40", 0.5) ) +
geom_spatraster(data = dros_heat) +
scale_fill_whitebox_c(
palette = "muted",
n.breaks = 8,
guide = guide_legend(reverse = TRUE)) +
labs(
tag = "B",
fill = "Species\nOccurences",
title = "Temperature tolerance") +
ylim(c(-60,85)) + theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
# adjust margins to align
p1_adjusted <- p1 + theme(plot.margin = margin(t = 0, r = 18, b = 10, l = 0))
p2_adjusted <- p2 + theme(plot.margin = margin(t = 0, r = 0, b = 10, l = 5))
## plot combined with layout adjustment
grid.arrange(p1_adjusted, p2_adjusted, ncol = 1, heights = c(1, 1) )
# # # # # # # # # # # # # # # # # #
# Figure 1.1 global species w/ heatmap heatmap
# point map
p1 <- world %>% ggplot() +
geom_spatvector(fill = alpha("grey40", 0.5)) +
geom_point(data = dfgs, aes(x = long, y = lat, colour = GS), size = 0.5) +
labs(
tag = "a",
fill = "Species Occurences",
title = "GBIF observations") +
scale_color_viridis_c() +
ylim(c(-60,85)) + theme_minimal() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.title = element_text(size = 10, face = "bold"))
# heat map
p2 <- world %>% ggplot() +
geom_spatvector(fill = alpha("grey40", 0.5) ) +
geom_spatraster(data = dros_heat) +
scale_fill_whitebox_c(
palette = "muted",
n.breaks = 8,
guide = guide_legend(reverse = TRUE)) +
labs(
tag = "b",
fill = "Species\nOccurences",
title = "Temperature tolerance") +
ylim(c(-60,85)) + theme_minimal() +
theme(plot.title = element_text(size = 10, face = "bold"))
# adjust margins to align
p1_adjusted <- p1 + theme(plot.margin = margin(t = 0, r = 18, b = 10, l = 0))
p2_adjusted <- p2 + theme(plot.margin = margin(t = 0, r = 0, b = 10, l = 5))
## plot combined with layout adjustment
grid.arrange(p1_adjusted, p2_adjusted, ncol = 1, heights = c(1, 1) )
# load output data for plotting
results     <- "~/data/mapping/"
df_comb     <- read.csv(file.path(results, "drosophila_area_table.csv"))
df_cont     <- read.csv(file.path(results, "drosophila_continent_table.csv"))
# load output data for plotting
results     <- "data/mapping/"
df_comb     <- read.csv(file.path(results, "drosophila_area_table.csv"))
df_cont     <- read.csv(file.path(results, "drosophila_continent_table.csv"))
df_eco      <- read.csv(file.path(results, "drosophila_eco_table.csv"))
# load output data for plotting
results     <- "data/mapping/"
df_comb     <- read.csv(file.path(results, "drosophila_area_table.csv"))
df_cont     <- read.csv(file.path(results, "drosophila_continent_table.csv"))
df_eco      <- read.csv(file.path(results, "drosophila_eco_table.csv"))
# # # # # # # # # # # # # # # # # #
# function - plot standard metrics
lm_eqn <- function(df, x, y){
m <- lm(y ~ x, df)
pval <- summary(m)$coefficients[2, 4]
r2 <- summary(m)$r.squared
eq <- substitute( italic(y) == a ~italic(x) + b * "," ~ italic(pvalue) ~ "=" ~ pval * "," ~ italic(r)^2 ~ "=" ~ r2,
list(a = format(unname(coef(m)[2]), digits = 2),
b = format(unname(coef(m)[1]), digits = 2),
pval = format(pval, digits = 3),
r2 = format(r2, digits = 2) ) )
as.character(as.expression(eq))
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Figure 2.1 MbDna female vs temperature-based area distribution (WorldClim)
## plot with trend & metrics
# create label
data.label <- data.frame(
x = 25, y = 300,
label = c(lm_eqn(df_comb, x = df_comb$area_mkm2, y = df_comb$MbDNA_Female))
)
# plot
df_comb %>% ggplot(aes(x = area_mkm2, y = MbDNA_Female)) +
labs(
title = "Species MbDNA as a function of spatial distribution",
subtitle = "based on temperature threshold and WorldClim v2.1",
colour = "MbDNA (Male)",
y = "MbDNA (Female)",
x = bquote("Species distribution (million km"^2*")")
) +
geom_smooth(method = "lm", color="red", linetype = "dashed", size = 0.5, formula = y ~ x) +
geom_text(data = data.label, aes(x = x , y = y , label = label), size=4, parse = TRUE) +
geom_point() + theme_minimal() +
scale_color_viridis_c()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Figure 6.1 biogeographic distribution count (excluding Antarctic and Oceania)
## plot with trend
# join and pivot data
df_eco2 <- left_join(df_eco, df_comb %>% select(Species, Subgenus, MbDNA_Male, MbDNA_Female), by='Species') %>%
pivot_longer(cols = !c(Species,Subgenus, MbDNA_Male, MbDNA_Female),
names_to = "Biogeographic",
values_to = "values") %>%
filter(Biogeographic == "Afrotropic" | Biogeographic == "Neotropic") %>%
mutate(Biogeographic = as.factor(Biogeographic)) %>%
filter(values > 0) %>%
mutate(values = values/1e6)
# create labels
data.label <- df_eco2 %>%
group_by(Biogeographic) %>%
summarise(
x = 10,
y = 310,
label = lm_eqn(., values, MbDNA_Female)
)
# plot
df_eco2 %>%
ggplot(aes(x = values, y = MbDNA_Female, colour=Biogeographic)) +
labs(title = "Drosophila distribution and genome size",
subtitle = "by biogeographic region", y = "MbDNA (Female)",
x = bquote("Area by temperature tolerance (million"~km^2~")")) +
scale_colour_brewer(palette = "Dark2", guide = 'none') +
geom_point() + facet_wrap(.~Biogeographic) +
geom_smooth(method = "lm", color="red", linetype = "dashed", size = 0.5, formula = y ~ x) +
geom_text(data = data.label, aes(x = x , y = y , label = label), size=3.2, parse = TRUE) +
theme(legend.text=element_text(size=rel(0.5))) +
theme_minimal()
